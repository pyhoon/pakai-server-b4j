AppType=StandardJava
Build1=Default,b4j.webapi,SQLite,hu2_acceptall
Build2=MySQL,b4j.webapi,MySQL,hu2_acceptall
File1=category.html
File2=config.example
File3=help.html
File4=index.html
File5=main.html
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
Group=App
Library1=jcore
Library2=json
Library3=miniormutils
Library4=xml2map
Library5=jstringutils
Module1=CategoriesApiHandler
Module10=|absolute|C:\B4X\Development\WebApiUtils-B4J\WebApiUtils
Module2=CategoriesWebHandler
Module3=CorsFilter
Module4=FindApiHandler
Module5=HelpHandler
Module6=HttpsFilter
Module7=IndexWebHandler
Module8=ProductsApiHandler
Module9=Utility
NumberOfFiles=5
NumberOfLibraries=5
NumberOfModules=10
Version=10.2
@EndOfDesignText@
#Region Project Attributes
' Product: 				Web API Server
' Version: 				4.00 beta 6
' Description: 			Server application project template
' Developer:			Poon Yip Hoon (Aeric) (https://www.b4x.com/android/forum/members/aeric.74499/)
' License:				MIT License
' GitHub:				https://github.com/pyhoon/web-api-server-b4j/tree/v4.00beta
' Forum thread:			https://www.b4x.com/android/forum/threads/project-template-web-api-server-v4-beta.167080/
' Tutorial:				Not available
' Donation:				PayPal (https://paypal.me/aeric80/)
' *** IDE Shorcuts ***
' 1. AppStart: 			ide://goto?Module=Main&Sub=AppStart
' 2. Configurable: 		ide://goto?Module=Main&Sub=Configurable
' 3. CreateDatabase: 	ide://goto?Module=Main&Sub=CreateDatabase
' Objects folder: 		ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects
' LibDownloader: 		ide://run?file=%JAVABIN%\java.exe&Args=-jar&Args=%ADDITIONAL%\..\B4X\libget-non-ui.jar&Args=%PROJECT%&Args=true
' Publish:				ide://run?file=%JAVABIN%\jar.exe&WorkingDirectory=../Objects&Args=-cMf&Args=Publish.zip&Args=www&Args=*.jar&Args=*.ini '&Args=*.db&Args=*.html (optional db and html)
#CommandLineArgs:
#MergeLibraries: True
#If MySQL
#AdditionalJar: mysql-connector-java-8.0.30
#Else
#AdditionalJar: sqlite-jdbc-3.7.2
#End If
#End Region

Sub Process_Globals
	Public ctx					As Map
	Public info 				As ConnectionInfo
	Public srvr 				As Server
	Public conn					As ORMConnector
	Public conf 				As ServerConfigurations
	Private Const COLOR_RED 	As Int = -65536
	Private Const COLOR_BLUE 	As Int = -16776961
	Private Const VERSION_NAME	As String = "4.00 beta 6"
	Type ServerConfigurations (EnableCORS As Boolean, EnableHelp As Boolean, EnableSSL As Boolean, Port As Int, SSLPort As Int, RootUrl As String, RootPath As String, ServerUrl As String, ApiName As String, ApiVersioning As Boolean, VerboseMode As Boolean, SslKeystoreDir As String, SslKeystoreFile As String, SslKeystorePassword As String, StaticFilesBrowsable As Boolean, StaticFilesFolder As String, Version As String, SmtpUserName As String, SmtpPassword As String, SmtpServer As String, SmtpUseSsl As String, SmtpPort As Int)
End Sub

' <link>Open in browser|http://127.0.0.1:8080</link>
Sub AppStart (Args() As String)
	InitServer
	srvr.AddHandler("", "IndexWebHandler", False) 										' Home handler
	If conf.EnableHelp Then
		srvr.AddHandler("/help", "HelpHandler", False) 									' Help handler
	End If
	srvr.AddHandler("/categories/*", "CategoriesWebHandler", False) 					' Web handler
	srvr.AddHandler($"/${conf.ApiName}/categories/*"$, "CategoriesApiHandler", False) 	' API handler
	srvr.AddHandler($"/${conf.ApiName}/products/*"$, "ProductsApiHandler", False) 		' API handler
	srvr.AddHandler($"/${conf.ApiName}/find/*"$, "FindApiHandler", False) 				' API handler
	srvr.Start
	Log($"Web API Server (version = ${conf.Version}) is running on port ${srvr.Port}${IIf(srvr.SslPort > 0, $" (redirected to port ${srvr.SslPort})"$, "")}"$)
	Log($"Open the following URL from your web browser"$)
	Log(conf.ServerUrl)
	InitDatabase
	StartMessageLoop
End Sub

' Additional Configuration
Private Sub Configurable
	#If DEBUG
	conf.EnableHelp = True
	#End If
	#If RELEASE
	conf.EnableSSL = True
	#End If
	conf.EnableCORS = True
'	conf.VerboseMode = True
	conf.StaticFilesBrowsable = False
End Sub

' Create Database Tables and Populate Data
Private Sub CreateDatabase
	LogColor("Creating database...", COLOR_BLUE)
	Wait For (conn.DBCreate) Complete (Success As Boolean)
	If Not(Success) Then
		LogColor("Database creation failed!", COLOR_RED)
		Return
	End If
	LogColor("Creating tables...", COLOR_BLUE)
	#If MySQL
	conn.InitPool
	#End If
	Dim DB As MiniORM
	DB.Initialize(DBType, DBOpen)
	'DB.ShowExtraLogs = True
	DB.UseTimestamps = True
	DB.QueryAddToBatch = True
	
	DB.Table = "tbl_categories"
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "category_name")))
	DB.Create
	
	DB.Columns = Array("category_name")
	DB.Insert2(Array("Hardwares"))
	DB.Insert2(Array("Toys"))

	DB.Table = "tbl_products"
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "category_id", "Type": DB.INTEGER)))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_code", "Length": "12")))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_name")))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_price", "Type": DB.DECIMAL, "Length": "10,2", "Default": "0.00")))
	DB.Foreign("category_id", "id", "tbl_categories", "", "")
	DB.Create
	
	DB.Columns = Array("category_id", "product_code", "product_name", "product_price")
	DB.Insert2(Array(2, "T001", "Teddy Bear", 99.9))
	DB.Insert2(Array(1, "H001", "Hammer", 15.75))
	DB.Insert2(Array(2, "T002", "Optimus Prime", 1000))
	
	Wait For (DB.ExecuteBatch) Complete (Success As Boolean)
	If Success Then
		LogColor("Database is created successfully!", COLOR_BLUE)
	Else
		LogColor("Database creation failed!", COLOR_RED)
	End If
	DB.Close
End Sub

' Configure Cross Origin in JavaScript call
Private Sub ConfigureCORS
	' =========================================================
	' Note: If you have enabled JWT then you may not need this
	' =========================================================
	' allowedOrigins = "*" or "http://google.com"
	' allowedMethods = "*" or "GET,POST,HEAD"
	' allowedHeaders = "*" or "X-Requested-With,Content-Type,Accept,Origin"
	' Reference: https://www.b4x.com/android/forum/threads/jetty-cross-origin-filter-to-be-added-to-jserver-library.85641/
	' =========================================================
	If conf.EnableCORS = False Then
		LogColor("CORS is disabled", COLOR_BLUE)
		Return
	End If
	Dim Paths As List
	Paths.Initialize
	Paths.Add(CreateMap("path": "*", "origins": "*", "methods": "POST,PUT,DELETE", "headers": "*")) ' All origins access
	'Paths.Add(CreateMap("path": "*", "origins": "http://127.0.0.1:3000", "methods": "POST,PUT,DELETE", "headers": "*"))
	
	For Each Item As Map In Paths
		Dim path As String = Item.Get("path")
		Dim settings As Map = CreateMap( _
		"allowedOrigins": Item.Get("origins"), _
		"allowedMethods": Item.Get("methods"), _
		"allowedHeaders": Item.Get("headers"), _
		"allowCredentials": "true", _
		"preflightMaxAge": 1800, _
		"chainPreflight": "false")
		Dim cors As CorsFilter
		cors.Initialize(path, settings)
		cors.AddToServer(srvr)
	Next
	LogColor("CORS is enabled", COLOR_BLUE)
End Sub

' Configure Keystore and SSL Port
Private Sub ConfigurePort
	If conf.Port = 0 Then
		conf.Port = srvr.Port
		LogColor($"Server Port is not set (default to ${conf.Port})"$, COLOR_RED)
	Else
		srvr.Port = conf.Port
	End If
	If conf.EnableSSL Then
		If conf.SSLPort = 0 Then
			LogColor("SSL Port is not set (SSL is disabled)", COLOR_RED)
			If conf.Port <> 80 Then
				conf.ServerUrl = conf.RootUrl & ":" & conf.Port
			End If
			If conf.RootPath <> "" Then
				If conf.RootPath.StartsWith("/") = False Then conf.RootPath = "/" & conf.RootPath
				If conf.RootPath.EndsWith("/") = True Then conf.RootPath = conf.RootPath.SubString2(0, conf.RootPath.Length)
				conf.ServerUrl = conf.ServerUrl & conf.RootPath
				ctx.Put("ROOT_PATH", conf.RootPath)
			End If
			ctx.Put("SERVER_URL", conf.ServerUrl)
			Return
		End If
		If conf.SslKeystoreDir = "" Then
			conf.SslKeystoreDir = File.DirApp
		End If
		If conf.SslKeystoreFile = "" Then
			LogColor("SslKeystoreFile is not set (SSL is disabled)", COLOR_RED)
			Return
		End If
		If File.Exists(conf.SslKeystoreDir, conf.SslKeystoreFile) = False Then
			LogColor("SslKeystoreFile is found (SSL is disabled)", COLOR_RED)
			Return
		End If
		
		Dim ssl As SslConfiguration
		ssl.Initialize
		ssl.SetKeyStorePath(conf.SslKeystoreDir, conf.SslKeystoreFile)
		ssl.KeyStorePassword = conf.SslKeystorePassword
		srvr.SetSslConfiguration(ssl, conf.SSLPort)
		'add filter to redirect all traffic from http to https (optional)
		srvr.AddFilter("/*", "HttpsFilter", False)
		conf.RootUrl = conf.RootUrl.Replace("http:", "https:")
		ctx.Put("ROOT_URL", conf.RootUrl)
		If conf.SSLPort <> 443 Then
			conf.ServerUrl = conf.RootUrl & ":" & conf.SSLPort
		End If
		LogColor("SSL is enabled", COLOR_BLUE)
	Else
		If conf.Port <> 80 Then
			conf.ServerUrl = conf.RootUrl & ":" & conf.Port
		End If
		LogColor("SSL is disabled", COLOR_BLUE)
	End If
	If conf.RootPath <> "" Then
		If conf.RootPath.StartsWith("/") = False Then conf.RootPath = "/" & conf.RootPath
		If conf.RootPath.EndsWith("/") = True Then conf.RootPath = conf.RootPath.SubString2(0, conf.RootPath.Length)
		ctx.Put("ROOT_PATH", conf.RootPath)
		conf.ServerUrl = conf.ServerUrl & conf.RootPath
	End If
	ctx.Put("SERVER_URL", conf.ServerUrl)
End Sub

' Configure permission for browsing static files folder
Private Sub ConfigureStaticFiles
	srvr.StaticFilesFolder = conf.StaticFilesFolder
	srvr.SetStaticFilesOptions(CreateMap("dirAllowed": conf.StaticFilesBrowsable))
End Sub

' Setting default values for Server Configurations
Private Sub InitServer
	srvr.Initialize("")
	If File.Exists(File.DirApp, "config.ini") = False Then
		File.Copy(File.DirAssets, "config.example", File.DirApp, "config.ini")
	End If
	ctx = WebApiUtils.ReadMapFile(File.DirApp, "config.ini")
	ctx.Put("VERSION", VERSION_NAME)
	conf.Initialize
	conf.Version = VERSION_NAME
	conf.StaticFilesFolder = File.Combine(File.DirApp, "www")
	conf.Port = ctx.GetDefault("ServerPort", 8080)
	conf.SSLPort = ctx.GetDefault("SSLPort", 0)
	conf.RootUrl = ctx.GetDefault("ROOT_URL", "http://127.0.0.1")
	conf.RootPath = ctx.GetDefault("ROOT_PATH", "")
	conf.ServerUrl = conf.RootUrl
	conf.ApiName = ctx.GetDefault("API_NAME", "api")
	conf.ApiVersioning = ctx.GetDefault("API_VERSIONING", "False").As(String).EqualsIgnoreCase("True")
	conf.SslKeystoreDir = ctx.GetDefault("SSL_KEYSTORE_DIR", "")
	conf.SslKeystoreFile = ctx.GetDefault("SSL_KEYSTORE_FILE", "")
	conf.SslKeystorePassword = ctx.GetDefault("SSL_KEYSTORE_PASSWORD", "")
	Configurable
	ConfigurePort
	ConfigureCORS
	ConfigureStaticFiles
	CreateJSFiles(WebApiUtils.CONTENT_TYPE_JSON)
End Sub

' Create Database Connection
Private Sub InitDatabase
	Try
		LogColor("Checking database...", COLOR_BLUE)
		info.Initialize
		info.DBType = ctx.GetDefault("DbType", "")
		Select info.DBType
			Case "MySQL"
				#If MySQL
				info.DBHost = ctx.GetDefault("DbHost", "")
				info.DBPort = ctx.GetDefault("DbPort", "")
				info.DBName = ctx.GetDefault("DbName", "")
				info.DriverClass = ctx.GetDefault("DriverClass", "")
				info.JdbcUrl = ctx.GetDefault("JdbcUrl", "")
				info.User = ctx.GetDefault("User", "")
				info.Password = ctx.GetDefault("Password", "")
				info.MaxPoolSize = ctx.GetDefault("MaxPoolSize", 0)
				conn.Initialize(info)
				Wait For (conn.InitSchema) Complete (Success As Boolean)
				If Success = False Then
					LogColor("Database initilialization failed!", COLOR_RED)
					Log("Application is terminated.")
					ExitApplication
				End If
				If conn.Test = False Then
					LogColor("Database connection failed!", COLOR_RED)
					Log("Application is terminated.")
					ExitApplication
				End If
				Wait For (conn.DBExist2) Complete (DBFound As Boolean)				
				#Else
				ShowBuildConfigurationNotMatch
				Return
				#End If
			Case "SQLite"
				#If SQLite
				info.DBDir = ctx.GetDefault("DbDir", "")
				info.DBFile = ctx.GetDefault("DbFile", "")
				info.JournalMode = "WAL"
				conn.Initialize(info)
				Dim DBFound As Boolean = conn.DBExist
				#Else
				ShowBuildConfigurationNotMatch
				Return
				#End If				
		End Select
		If DBFound Then
			LogColor($"${info.DBType} database found!"$, COLOR_BLUE)
			#If MySQL
			conn.InitPool
			#End If
		Else
			LogColor($"${info.DBType} database not found!"$, COLOR_RED)
			CreateDatabase
		End If
	Catch
		LogError(LastException.Message)
		LogColor("Error checking database!", COLOR_RED)
		Log("Application is terminated.")
		ExitApplication
	End Try
End Sub

' Generate JS files from code to save some file size
Private Sub CreateJSFiles (ContentType As String)
	Dim skip As Boolean
	Dim Parent As String = File.Combine(conf.StaticFilesFolder, "assets")
	Dim DirName As String = File.Combine(Parent, "scripts")
	If File.Exists(DirName, "") = False Then
		File.MakeDir(Parent, "scripts")
	Else
	#If Release
		skip = True ' skip overwriting files in release if scripts folder exists
	#End If
	End If
	If skip = False Then
		Utility.GenerateJSFileForCategory(DirName, "category.js", ContentType, conf.VerboseMode)
		Utility.GenerateJSFileForSearch(DirName, "search.js", ContentType, conf.VerboseMode)
		Utility.GenerateJSFileForHelp(DirName, "help.js", ContentType, conf.VerboseMode)
	End If
End Sub

Private Sub ShowBuildConfigurationNotMatch
	LogColor($"Database type does not match with build configuration!"$, COLOR_RED)
	LogColor($"Application is terminated."$, COLOR_RED)
	ExitApplication
End Sub

Public Sub DBType As String
	Return conn.DBType
End Sub

Public Sub DBOpen As SQL
	Return conn.DBOpen
End Sub

Public Sub DBClose
	conn.DBClose
End Sub