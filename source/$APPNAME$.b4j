AppType=StandardJava
Build1=Default,b4j.webapi,SQLite,hu2_acceptall
Build2=MySQL,b4j.webapi,MySQL,hu2_acceptall
File1=category.html
File2=config.example
File3=help.html
File4=index.html
File5=main.html
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
Group=App
Library1=jcore
Library2=miniormutils
Library3=webapiutils
Library4=endsmeet
Module1=CategoriesApiHandler
Module2=CategoriesWebHandler
Module3=CorsFilter
Module4=FindApiHandler
Module5=HelpHandler
Module6=HttpsFilter
Module7=IndexWebHandler
Module8=ProductsApiHandler
Module9=Utility
NumberOfFiles=5
NumberOfLibraries=4
NumberOfModules=9
Version=10.2
@EndOfDesignText@
#Region Project Attributes
<<<<<<< Updated upstream
' Product: 				Pakai Server
' Version: 				4.00
' Description: 			Server application project template
' Developer:			Poon Yip Hoon (Aeric) (https://www.b4x.com/android/forum/members/aeric.74499/)
=======
' Version: 				5.00
>>>>>>> Stashed changes
' License:				MIT License
' Product: 				Pakai Server
' Description: 			Server application project template
' Donation:				PayPal (https://paypal.me/aeric80/)
' Source Code:			GitHub (https://github.com/pyhoon/pakai-server-b4j)
' Developer:			Poon Yip Hoon (Aeric) (https://www.b4x.com/android/forum/members/aeric.74499/)
' More information:		B4X Forum (https://www.b4x.com/android/forum/threads/project-template-pakai-framework.167080/)
' *** IDE Shorcuts ***
' 1. AppStart: 			ide://goto?Module=Main&Sub=AppStart
' 2. CreateDatabase: 	ide://goto?Module=Main&Sub=CreateDatabase
' 3. Objects folder: 	ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects
' 4. LibDownloader: 	ide://run?file=%JAVABIN%\java.exe&Args=-jar&Args=%ADDITIONAL%\..\B4X\libget-non-ui.jar&Args=%PROJECT%&Args=true
' 5. Publish:			ide://run?file=%JAVABIN%\jar.exe&WorkingDirectory=../Objects&Args=-cMf&Args=Publish.zip&Args=www&Args=*.jar&Args=*.ini
#CommandLineArgs:
#MergeLibraries: True
#If SQLite
#AdditionalJar: sqlite-jdbc-3.7.2
#Else If MySQL
#AdditionalJar: mysql-connector-java-8.0.30
#End If
#End Region

Sub Process_Globals
	Public ctx					As Map
	Public app 					As EndsMeet
	Private conn				As ORMConnector
	Private info 				As ConnectionInfo
	Private Const COLOR_RED 	As Int = -65536
	Private Const COLOR_BLUE 	As Int = -16776961
<<<<<<< Updated upstream
	Private Const VERSION_NAME	As String = "4.00"
	Type ServerConfigurations (EnableCORS As Boolean, EnableHelp As Boolean, EnableSSL As Boolean, Port As Int, SSLPort As Int, RootUrl As String, RootPath As String, ServerUrl As String, ApiName As String, ApiVersioning As Boolean, PayloadType As String, ContentType As String, VerboseMode As Boolean, OrderedKeys As Boolean, SslKeystoreDir As String, SslKeystoreFile As String, SslKeystorePassword As String, StaticFilesBrowsable As Boolean, StaticFilesFolder As String, Version As String, SmtpUserName As String, SmtpPassword As String, SmtpServer As String, SmtpUseSsl As String, SmtpPort As Int)
=======
	Private Const VERSION 		As String = "5.00 beta 1"
>>>>>>> Stashed changes
End Sub

' <link>Open in browser|http://127.0.0.1:8080</link>
Sub AppStart (Args() As String)
	app.Initialize
	app.UseConfigFile = True
	#If RELEASE
	app.ssl.Enabled = True
	#End If
	app.cors.Path = Array("*")
	app.cors.Settings = CreateMap( _
	"allowedOrigins": "*", _
	"allowedHeaders": "*", _
	"allowedMethods": "*", _
	"allowCredentials": "true", _
	"preflightMaxAge": 1800, _
	"chainPreflight": "false")
	app.LogEnabled = True
	'app.HelpEnabled = True
	app.api.EnableHelp = True
	app.api.VerboseMode = True
	app.api.OrderedKeys = True
	app.api.ContentType = WebApiUtils.CONTENT_TYPE_JSON ' Default format
	app.Route("", "IndexWebHandler")
    app.Route("/help", "HelpHandler")
    app.Route("/categories/*", "CategoriesWebHandler")
    app.Route($"/${app.api.Name}/categories/*"$, "CategoriesApiHandler")
    app.Route($"/${app.api.Name}/products/*"$, "ProductsApiHandler")
    app.Route($"/${app.api.Name}/find/*"$, "FindApiHandler")
	'app.static.Folder = File.Combine(File.DirApp, "www")
	'app.static.Browsable = False
	app.UseConfigFile = True
    app.Start
	CreateJSFiles
	app.ShowLog
	app.ctx.Put("VERSION", VERSION)
	Log($"App version: ${VERSION}"$)
	Log($"Open the following URL from your web browser"$)
	Log(app.ServerUrl)
	InitDatabase
	StartMessageLoop
End Sub

' Additional Configuration
'Private Sub Configurable
'	#If DEBUG
'	conf.EnableHelp = True
'	#End If
'	#If RELEASE
'	conf.EnableSSL = True
'	#End If
'	conf.EnableCORS = True
'	conf.VerboseMode = True
'	conf.StaticFilesBrowsable = False
'End Sub

' Create Database Tables and Populate Data
Private Sub CreateDatabase
	LogColor("Creating database...", COLOR_BLUE)
	Wait For (conn.DBCreate) Complete (Success As Boolean)
	If Not(Success) Then
		LogColor("Database creation failed!", COLOR_RED)
		Return
	End If
	LogColor("Creating tables...", COLOR_BLUE)
	#If MySQL
	conn.InitPool
	#End If
	Dim DB As MiniORM
	DB.Initialize(DBType, DBOpen)
	'DB.ShowExtraLogs = True
	DB.UseTimestamps = True
	DB.QueryAddToBatch = True
	
	DB.Table = "tbl_categories"
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "category_name")))
	DB.Create
	
	DB.Columns = Array("category_name")
	DB.Insert2(Array("Hardwares"))
	DB.Insert2(Array("Toys"))

	DB.Table = "tbl_products"
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "category_id", "Type": DB.INTEGER)))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_code", "Length": "12")))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_name")))
	DB.Columns.Add(DB.CreateColumn2(CreateMap("Name": "product_price", "Type": DB.DECIMAL, "Length": "10,2", "Default": "0.00")))
	DB.Foreign("category_id", "id", "tbl_categories", "", "")
	DB.Create
	
	DB.Columns = Array("category_id", "product_code", "product_name", "product_price")
	DB.Insert2(Array(2, "T001", "Teddy Bear", 99.9))
	DB.Insert2(Array(1, "H001", "Hammer", 15.75))
	DB.Insert2(Array(2, "T002", "Optimus Prime", 1000))
	
	Wait For (DB.ExecuteBatch) Complete (Success As Boolean)
	If Success Then
		LogColor("Database is created successfully!", COLOR_BLUE)
	Else
		LogColor("Database creation failed!", COLOR_RED)
	End If
	DB.Close
End Sub

' Create Database Connection
Private Sub InitDatabase
	Try
		LogColor("Checking database...", COLOR_BLUE)
		Dim ctx As Map = app.ctx
		info.Initialize
		info.DBType = ctx.GetDefault("DbType", "")
		Select info.DBType
			Case "MySQL"
				#If MySQL
				info.DBHost = ctx.GetDefault("DbHost", "")
				info.DBPort = ctx.GetDefault("DbPort", "")
				info.DBName = ctx.GetDefault("DbName", "")
				info.DriverClass = ctx.GetDefault("DriverClass", "")
				info.JdbcUrl = ctx.GetDefault("JdbcUrl", "")
				info.User = ctx.GetDefault("User", "")
				info.Password = ctx.GetDefault("Password", "")
				info.MaxPoolSize = ctx.GetDefault("MaxPoolSize", 0)
				conn.Initialize(info)
				Wait For (conn.InitSchema) Complete (Success As Boolean)
				If Success = False Then
					LogColor("Database initilialization failed!", COLOR_RED)
					Log("Application is terminated.")
					ExitApplication
				End If
				If conn.Test = False Then
					LogColor("Database connection failed!", COLOR_RED)
					Log("Application is terminated.")
					ExitApplication
				End If
				Wait For (conn.DBExist2) Complete (DBFound As Boolean)				
				#Else
				ShowBuildConfigurationNotMatch
				Return
				#End If
			Case "SQLite"
				#If SQLite
				info.DBDir = ctx.GetDefault("DbDir", "")
				info.DBFile = ctx.GetDefault("DbFile", "")
				info.JournalMode = "WAL"
				conn.Initialize(info)
				Dim DBFound As Boolean = conn.DBExist
				#Else
				ShowBuildConfigurationNotMatch
				Return
				#End If				
		End Select
		If DBFound Then
			LogColor($"${info.DBType} database found!"$, COLOR_BLUE)
			#If MySQL
			conn.InitPool
			#End If
		Else
			LogColor($"${info.DBType} database not found!"$, COLOR_RED)
			CreateDatabase
		End If
	Catch
		LogError(LastException.Message)
		LogColor("Error checking database!", COLOR_RED)
		Log("Application is terminated.")
		ExitApplication
	End Try
End Sub

' Generate JS files from code to save some file size
Private Sub CreateJSFiles
	Dim skip As Boolean
	Dim Parent As String = File.Combine(app.static.Folder, "assets")
	Dim DirName As String = File.Combine(Parent, "scripts")
	If File.Exists(DirName, "") = False Then
		File.MakeDir(Parent, "scripts")
	Else
	#If Release
	skip = True ' skip overwriting files in release if scripts folder exists
	#End If
	End If
	If skip = False Then
		Utility.GenerateJSFileForCategory(DirName, "category.js", app.api.ContentType, app.api.VerboseMode)
		Utility.GenerateJSFileForSearch(DirName, "search.js", app.api.ContentType, app.api.VerboseMode)
		Utility.GenerateJSFileForHelp(DirName, "help.js", app.api.ContentType, app.api.VerboseMode)
	End If
End Sub

Private Sub ShowBuildConfigurationNotMatch
	LogColor($"Database type does not match with build configuration!"$, COLOR_RED)
	LogColor($"Application is terminated."$, COLOR_RED)
	ExitApplication
End Sub

Public Sub DBType As String
	Return conn.DBType
End Sub

Public Sub DBOpen As SQL
	Return conn.DBOpen
End Sub

Public Sub DBClose
	conn.DBClose
End Sub