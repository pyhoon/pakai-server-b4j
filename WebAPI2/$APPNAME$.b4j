AppType=StandardJava
Build1=Default (SQLite),b4j.webapi,SQLite,hu2_acceptall
Build2=MinimaList,b4j.webapi,MinimaList,hu2_acceptall
Build3=MySQL,b4j.webapi,MySQL,hu2_acceptall
Build4=SQL Server,b4j.webapi,MSSQL,hu2_acceptall
Build5=PostgreSQL,b4j.webapi,PostgreSQL,hu2_acceptall
Build6=Firebird,b4j.webapi,Firebird,hu2_acceptall
Build7=DBF,b4j.webapi,DBF,hu2_acceptall
Build8=No Database,b4j.webapi,No_Database,hu2_acceptall
File1=category.html
File2=config.example
File3=index.html
File4=main.html
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
Library1=jcore
Library2=keyvaluestore
Library3=minimalistutils
Library4=webapicontroller
Library5=webapiutils
Module1=ApiHandler
Module10=WebHandler
Module2=CategoryController
Module3=CorsFilter
Module4=DatabaseConnector
Module5=FindController
Module6=HelpHandler
Module7=HttpsFilter
Module8=IndexController
Module9=ProductController
NumberOfFiles=4
NumberOfLibraries=5
NumberOfModules=10
Version=10
@EndOfDesignText@
' Name: 			Web API Server Project Template
' Description: 		Non-UI application (console / server application)
' Version: 			2.04

' Objects folder: 	file:///C:/B4X/Development/Web%20API%20Server%202.04/Objects/ (Bring to front)
' Objects folder: 	ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects

' ConfigureServer: 	ide://goto?Module=Main&Sub=ConfigureServer
' ApiHandler: 		ide://goto?Module=ApiHandler&Sub=ProcessRequest
' HelpHandler: 		ide://goto?Module=HelpHandler&Sub=GenerateResponseScript
#If MinimaList
' MinimaList: 		ide://goto?Module=Main&Sub=ConfigureMinimaList
' SeedData: 		ide://goto?Module=IndexController&Sub=SeedData
#End If

' Click to publish: ide://run?file=%JAVABIN%\jar.exe&WorkingDirectory=../Objects&Args=-cMf&Args=Publish.zip&Args=www&Args=*.jar&Args=*.ini&Args=*.db&Args=help.html&Args=help.js

#PackagerProperty: AdditionalModuleInfoString = provides org.slf4j.spi.SLF4JServiceProvider with org.eclipse.jetty.logging.JettyLoggingServiceProvider;
#PackagerProperty: AdditionalModuleInfoString = provides org.eclipse.jetty.io.ssl.ALPNProcessor.Server with org.eclipse.jetty.alpn.java.server.JDK9ServerALPNProcessor;
#PackagerProperty: AdditionalModuleInfoString = provides org.eclipse.jetty.http.HttpFieldPreEncoder with org.eclipse.jetty.http2.hpack.HpackFieldPreEncoder, org.eclipse.jetty.http.Http1FieldPreEncoder;
#PackagerProperty: AdditionalModuleInfoString = uses org.eclipse.jetty.util.security.CredentialProvider;
#PackagerProperty: AdditionalModuleInfoString = uses org.eclipse.jetty.io.ssl.ALPNProcessor.Server;
#PackagerProperty: IncludedModules = jdk.charsets, jdk.crypto.ec
#CustomBuildAction: After Packager, %WINDIR%\System32\robocopy.exe, www temp\build\bin\www /E

#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True
	#IgnoreWarnings: 32
#End Region

#If RELEASE
#AdditionalJar: sqlite-jdbc-3.39.3.0
#AdditionalJar: mysql-connector-java-8.0.30
'#AdditionalJar: jtds-1.3.1
'#AdditionalJar: jaybird-5.0.0.java11
'#AdditionalJar: postgresql-42.6.0
'#AdditionalJar: javadbf-1.13.2
'#AdditionalJar: dbschema-dbf-jdbc1.0
'#AdditionalJar: h2-1.4.200
#End If
#If DEBUG
' Choose build configuration
#If SQLite
#AdditionalJar: sqlite-jdbc-3.39.3.0
#Else If MySQL
#AdditionalJar: mysql-connector-java-8.0.30
#Else If MSSQL
#AdditionalJar: jtds-1.3.1
#Else If Firebird
#AdditionalJar: jaybird-5.0.0.java11
#Else If PostgreSQL
#AdditionalJar: postgresql-42.6.0
#Else If DBF
#AdditionalJar: javadbf-1.13.2
#AdditionalJar: dbschema-dbf-jdbc1.0
#AdditionalJar: h2-1.4.200
#Else If MinimaList
' Use MinimaList
#End If
#End If

Sub Process_Globals
	Public const VERSION 			As String = "2.04"
	Public const PREFIX 			As String = "WebAPI_v2_"
	Public srvr 					As Server
	Public ROOT_URL 				As String
	Public ROOT_PATH 				As String
	Public API_PATH 				As String
	Public API_NAME 				As String
	Public API_VERSIONING 			As String
	Public SERVER_PORT 				As Int = 8080
	Public SSL_PORT 				As Int
	Public Config 					As Map
	Public Element 					As Element
	Public Controllers 				As List
	Public PRINT_FULL_REQUEST_URL	As Boolean = True
	Public SESSIONS_ENABLED 		As Boolean
	Public COOKIES_ENABLED 			As Boolean
	Public COOKIES_EXPIRATION 		As Long
	Public SimpleResponse 			As Boolean
	Public SimpleResponseFormat 	As String
	Public SimpleResponseDataKey 	As String
	#If MinimaList
	Public KVS_ENABLED 				As Boolean
	Public KVS 						As KeyValueStore
	Public CategoryList 			As MinimaList
	Public ProductList 				As MinimaList
	#End If
	#If Not(MinimaList) And Not(No_Database)
	Public DBConnector				As DatabaseConnector
	#End If
	Type ApiElement (Name As String, Versioning As Boolean)
	Type WebElement (Root As String, Path As String)
	Type Element (Web As WebElement, Api As ApiElement, Elements As List, PathIndex As Int, ApiVersionIndex As Int, ApiControllerIndex As Int, WebControllerIndex As Int)
End Sub

' <link>Click to browse|http://127.0.0.1:19800/web</link>
Sub AppStart (Args() As String)
	srvr.Initialize("")		' Create the server
	ReadConfig				' Read environment settings
	ConfigureServer			' Configure the server
	srvr.Start				' Start the server
	ShowWelcomeText(True)	' Show information in Logs when server starts
	StartMessageLoop
End Sub

Sub ReadConfig
	If Not(File.Exists(File.DirApp, "config.ini")) Then
		File.Copy(File.DirAssets, "config.example", File.DirApp, "config.ini")
	End If
	Config = WebApiUtils.ReadMapFile(File.DirApp, "config.ini")
	Config.Put("VERSION", VERSION)
End Sub

Private Sub ConfigureServer
	ConfigurePort								' Server Port
	ConfigurePaths								' App URL and Paths
	ConfigureElements							' Pretty URL structures
	ConfigureHandlers							' Server Handlers
	ConfigureSSL(False)							' SSL Port
	ConfigureCORS(True)							' CrossOriginFilter
	#If Not(MinimaList) And Not(No_Database)
	ConfigureDatabase(True)						' Database connection
	#End If
	ConfigureResponse(False)					' Enable Simple Response Format
	ConfigureCookies(False)						' Enable Cookies
	ConfigureSessions(False)					' Enable Sessions
	ConfigureBasicAuth(False)					' Enable Basic Authentication
	ConfigureJWTAuth(False)						' Enable JSON Web Token Authentication
	ConfigureControllers(True)					' Show Controllers in Documentation
	ConfigureStaticFiles(True)					' Disable Permission for Browsing Static Files Folder
	#If MinimaList
	ConfigureMinimaList(True)					' Configure MinimaList
	ConfigureKeyValueStore(True)				' Enable KeyValueStore
	#End If
End Sub

' This configuration is automatically read from the values in Config.ini
Public Sub ConfigurePort
	SERVER_PORT = Config.Get("ServerPort")
	If SERVER_PORT = 0 Then
		SERVER_PORT = 8080
		Log($"Server Port is set to 8080"$)
	Else
		srvr.Port = SERVER_PORT						' Set server port
	End If
End Sub

' This configuration is automatically read from the values in Config.ini
Public Sub ConfigurePaths
	' Root URL
	ROOT_URL = Config.Get("ROOT_URL")

	If SSL_PORT <> 0 Then		
		If SSL_PORT <> 443 Then
			ROOT_URL = ROOT_URL & ":" & SSL_PORT
		End If
		ROOT_URL = ROOT_URL.Replace("http:", "https:")
	Else
		If SERVER_PORT <> 80 Then
			ROOT_URL = ROOT_URL & ":" & SERVER_PORT
		End If
	End If
	Config.Put("ROOT_URL", ROOT_URL)
	
	' Root Path
	ROOT_PATH = Config.Get("ROOT_PATH")
	If ROOT_PATH = "" Then ROOT_PATH = "/"
	If ROOT_PATH <> "/" Then
		If ROOT_PATH.StartsWith("/") = False Then ROOT_PATH = "/" & ROOT_PATH
		If ROOT_PATH.EndsWith("/") = False Then ROOT_PATH = ROOT_PATH & "/"
	End If
	Config.Put("ROOT_PATH", ROOT_PATH)
	
	' API Name
	API_NAME = Config.Get("API_NAME")
	If API_NAME.Contains("/") Then
		Log($"API name cannot contains forward slash symbol!"$)
		Log($"Application is terminated."$)
		ExitApplication
		Return
	End If
	
	' API Path
	API_PATH = IIf(API_NAME.Length > 0, API_NAME & "/", "")
	
	' API Versioning
	API_VERSIONING = Config.Get("API_VERSIONING").As(String).ToUpperCase
End Sub

' This setting depends on ConfigurePaths
Public Sub ConfigureElements
	Element.Initialize
	Element.Elements.Initialize
	
	Element.Web.Root = "/" ' just a placeholder
	Element.Elements.Add(Element.Web.Root)
	
	Element.Web.Path = ROOT_PATH
	If Element.Web.Path.EqualsIgnoreCase("/") = False Then
		Element.Elements.Add(Element.Web.Path)
		Element.PathIndex = 1
	End If
	
	Element.Api.Name = API_NAME
	If Element.Api.Name.EqualsIgnoreCase("") = False Then
		Element.Elements.Add(Element.Api.Name)
	End If
	
	If API_VERSIONING = "TRUE" Then
		Element.Api.Versioning = True
		Element.Elements.Add("version") ' just a placeholder
	Else
		Element.Api.Versioning = False
	End If
	
	Element.ApiVersionIndex = Element.Elements.Size - 1
	Element.ApiControllerIndex = Element.Elements.Size
	Element.WebControllerIndex = Element.Elements.Size - IIf(Element.Api.Name.EqualsIgnoreCase(""), 0, 1) - IIf(Element.Api.Versioning, 1, 0) ' or just Element.PathIndex + 1
	
	Dim i As Int
	For Each item In Element.Elements
		LogDebug($"${i} - ${item}"$)
		i = i + 1
	Next
	LogDebug("PathIndex=" & Element.PathIndex)
	LogDebug("WebControllerIndex=" & Element.WebControllerIndex)
	LogDebug("ApiVersionIndex=" & Element.ApiVersionIndex)
	LogDebug("ApiControllerIndex=" & Element.ApiControllerIndex)
End Sub

' Configure this after ConfigureElements
Public Sub ConfigureHandlers
	If API_NAME.EqualsIgnoreCase("") Then
		' ===================================================================
		' Note: You can either enable ApiHandler or WebHandler, not both
		' ===================================================================
		' API route - /web/ (root path is used for single API handler)
		' ===================================================================
		srvr.AddHandler(ROOT_PATH & "*", "ApiHandler", False) 					' Add API handler (WebHandler disabled)
		' ===================================================================
		' OR
		' ===================================================================
		' Web route - /web/ (root path is used for single web handler)
		' ===================================================================
		'srvr.AddHandler(ROOT_PATH & "*", "WebHandler", False) 					' Add Web handler (ApiHandler disabled)
	Else
		' ===================================================================
		' Note: You can enable both ApiHandler and WebHandler
		' ===================================================================
		' API route - /web/api/ (recommended)
		' ===================================================================		
		srvr.AddHandler(ROOT_PATH & API_PATH & "*", "ApiHandler", False) 		' Add API handler
		' AND
		' ===================================================================
		' Web route - /web/ (optional)
		' ===================================================================
		srvr.AddHandler(ROOT_PATH & "*", "WebHandler", False) 					' Add Web handler
	End If
	' =======================================================================
	' Note: Documentation for debugging APIs without client app or Postman
	' =======================================================================
	' Help route - /web/help (optional) not required in release mode
	' =======================================================================
	srvr.AddHandler(ROOT_PATH & "help", "HelpHandler", False) 					' Add Help handler

	' =======================================================================
	' Web Sockets route (optional)
	' =======================================================================
	'srvr.AddWebSocket("/time", "WSTime")										' Add Web socket
End Sub

' If HelpHandler is used, controller class added here will be displayed on the documentation page
Public Sub ConfigureControllers (Enable As Boolean)
	' Note: You can be hide some APIs using #Hide keyword
	If Not(Enable) Then Return
	Controllers.Initialize
	Controllers.Add("CategoryController")
	Controllers.Add("ProductController")
	Controllers.Add("FindController")
End Sub

' Configure to use Simple JSON Response format
Public Sub ConfigureResponse (Enable As Boolean)
	If Not(Enable) Then Return
	' =======================================================================================
	' Note: By default, front-end set to use standard JSON format
	' Standard JSON object has 'm', 'e', 's', 'r', 'a' keys where the response (r) is a list
	' =======================================================================================
	SimpleResponse = True
	SimpleResponseFormat = "Auto"	' no conversion
	'SimpleResponseFormat = "List" 	' if data is a map, convert it into a list
	'SimpleResponseFormat = "Map" 	' if data is a list, convert it into a map with "data" as the key
	SimpleResponseDataKey = "data"	' change the "data" key to other key
End Sub

' Display some information in Logs (debug) or terminal (release)
Public Sub ShowWelcomeText (Enable As Boolean)
	If Not(Enable) Then Return
	Log($"Web API server (version = ${VERSION}) is running on port ${srvr.Port}${IIf(srvr.SslPort > 0, $" (redirected to port ${srvr.SslPort})"$, "")}"$)
	Log($"Open the following URL from your web browser"$)
	Log(ROOT_URL & ROOT_PATH)
End Sub

' By default SSL port is disabled
Public Sub ConfigureSSL (Enable As Boolean)
	If Not(Enable) Then Return
	SSL_PORT = Config.Get("SSLPort") : If IsNumber(SSL_PORT) = False Then SSL_PORT = 0
	If SSL_PORT = 0 Then Return
	
	Dim KeyStoreDir As String = Config.Get("SSL_KEYSTORE_DIR")
	Dim KeyStoreFile As String = Config.Get("SSL_KEYSTORE_FILE")
	Dim KeyStorePassword As String = Config.Get("SSL_KEYSTORE_PASSWORD")
	
	Dim ssl As SslConfiguration
	ssl.Initialize
	ssl.SetKeyStorePath(KeyStoreDir, KeyStoreFile)
	ssl.KeyStorePassword = KeyStorePassword
	'ssl.KeyManagerPassword = ""
	srvr.SetSslConfiguration(ssl, SSL_PORT)
	
	'add filter to redirect all traffic from http to https (optional)
	srvr.AddFilter("/*", "HttpsFilter", False)
End Sub

' Cross Origin in JavaScript call
Public Sub ConfigureCORS (Enable As Boolean)
	If Not(Enable) Then Return
	' =========================================================
	' Note: If you have enabled JWT then you may not need this
	' =========================================================
	' allowedOrigins = "*" or "http://google.com"
	' allowedMethods = "*" or "GET,POST,HEAD"
	' allowedHeaders = "*" or "X-Requested-With,Content-Type,Accept,Origin"
	' Eg. ConfigureCORS(ROOT_PATH & "account/*", "*", "", "")
	' Reference: https://www.b4x.com/android/forum/threads/jetty-cross-origin-filter-to-be-added-to-jserver-library.85641/
	' =========================================================
	Dim Paths As List
	Paths.Initialize
	
	'Paths.Add(CreateMap("path": "*", "origins": "*", "methods": "POST,PUT,DELETE", "headers": "*")) 		' All origins access (* methods not working)
	Paths.Add(CreateMap("path": ROOT_PATH & API_PATH & "v2/data/*", "origins": "http://localhost, http://127.0.0.1:3000", "methods": "POST,PUT,DELETE", "headers": "*")) ' vue.js prod/dev app
	
	For Each Item As Map In Paths
		Dim cors As CorsFilter
		cors.Initialize(Item.Get("path"), _
		CreateMap( _
		"allowedOrigins": Item.Get("origins"), _
		"allowedMethods": Item.Get("methods"), _
		"allowedHeaders": Item.Get("headers"), _
		"allowCredentials": "true", _
		"preflightMaxAge": 1800, _
		"chainPreflight": "false"))
		cors.AddToServer(srvr)
	Next
End Sub

' Configure permission for browsing static files folder
Public Sub ConfigureStaticFiles (Enable As Boolean)
	If Not(Enable) Then Return
	' ========================================================
	' Default is allowed browsing
	' ========================================================
	srvr.StaticFilesFolder = File.Combine(File.DirApp, "www")
	srvr.SetStaticFilesOptions(CreateMap("dirAllowed": False))
End Sub

' Use Sessions
Public Sub ConfigureSessions (Enable As Boolean)
	If Not(Enable) Then Return
	SESSIONS_ENABLED = True
End Sub

' Use Cookies
Public Sub ConfigureCookies (Enable As Boolean)
	If Not(Enable) Then Return
	COOKIES_ENABLED = True
	COOKIES_EXPIRATION = 90 * 24 * 60 * 60 			' in seconds = 90 days
End Sub

#If Not(MinimaList) And Not(No_Database)
' Use Database (create if not exist)
Public Sub ConfigureDatabase (Enable As Boolean)
	If Not(Enable) Then Return
	Dim DB As Conn
	If Config.ContainsKey("DbType") Then DB.DBType = Config.Get("DbType")
	If Config.ContainsKey("DbName") Then DB.DBName = Config.Get("DbName")
	If Config.ContainsKey("DbDir") Then DB.DBDir = Config.Get("DbDir")
	If Config.ContainsKey("DbFile") Then DB.DBFile = Config.Get("DbFile")
	If Config.ContainsKey("DriverClass") Then DB.DriverClass = Config.Get("DriverClass")
	If Config.ContainsKey("JdbcUrl") Then DB.JdbcUrl = Config.Get("JdbcUrl")
	If Config.ContainsKey("User") Then DB.User = Config.Get("User")
	If Config.ContainsKey("Password") Then DB.Password = Config.Get("Password")
	If Config.ContainsKey("MaxPoolSize") Then DB.MaxPoolSize = Config.Get("MaxPoolSize")
	Try
		'Log("Checking database...")
		Select DB.DBType
			Case "SQLite"
				Dim DBFound As Boolean
				If File.Exists(DB.DBDir, DB.DBFile) Then
					DBFound = True
				End If
				DBConnector.Initialize(DB)
			Case Else
				DBConnector.Initialize(DB)
				Wait For (DBConnector.DBExist) Complete (DBFound As Boolean)
		End Select
		If DBFound Then
			Log($"${DB.DBType} database found!"$)
			Return
		End If
	Catch
		LogError(LastException.Message)
		LogColor("Error checking database!", -65536)
		Log("Application is terminated.")
		ExitApplication
	End Try

	LogColor($"${DB.DBType} database not found!"$, -65536)
	Log("Creating database...")
	CreateDatabase
End Sub

Private Sub CreateDatabase
	Dim SQL1 As SQL = DBConnector.DBCreate
	Select DBConnector.DBEngine
		Case "SQLite"
			Dim qry As String
			qry = $"CREATE TABLE tbl_category (
			id INTEGER,
			category_name TEXT,
			created_date TEXT DEFAULT (dateTime('now', 'localtime')),
			modified_date TEXT,
			deleted_date TEXT,
			PRIMARY KEY(id AUTOINCREMENT))"$
			SQL1.AddNonQueryToBatch(qry, Null)
	
			qry = $"INSERT INTO tbl_category (category_name) VALUES (?)"$
			SQL1.AddNonQueryToBatch(qry, Array("Hardwares"))
			SQL1.AddNonQueryToBatch(qry, Array("Toys"))
	
			qry = $"CREATE TABLE tbl_products (
			id INTEGER,
			category_id INTEGER,
			product_code TEXT,
			product_name TEXT,
			product_price NUMERIC DEFAULT 0.00,
			created_date TEXT DEFAULT (dateTime('now', 'localtime')),
			modified_date TEXT,
			deleted_date TEXT,
			PRIMARY KEY(id AUTOINCREMENT),
			FOREIGN KEY (category_id) REFERENCES tbl_category (id))"$
			SQL1.AddNonQueryToBatch(qry, Null)
	
			qry = $"INSERT INTO tbl_products (category_id, product_code, product_name, product_price) VALUES (?, ?, ?, ?)"$
			SQL1.AddNonQueryToBatch(qry, Array(2, "T001", "Teddy Bear", 99.9))
			SQL1.AddNonQueryToBatch(qry, Array(1, "H001", "Hammer", 15.75))
			SQL1.AddNonQueryToBatch(qry, Array(2, "T002", "Optimus Prime", 1000.0))
		Case "MySQL"
			Dim qry As String
			qry = $"CREATE TABLE tbl_category (
			id INT(11) NOT NULL AUTO_INCREMENT,
			category_name varchar(255),
			created_date timestamp DEFAULT CURRENT_TIMESTAMP,
			modified_date datetime DEFAULT NULL,
			deleted_date datetime DEFAULT NULL,
			PRIMARY KEY(id))"$
			SQL1.AddNonQueryToBatch(qry, Null)
	
			qry = $"INSERT INTO tbl_category (category_name) VALUES (?)"$
			SQL1.AddNonQueryToBatch(qry, Array("Hardwares"))
			SQL1.AddNonQueryToBatch(qry, Array("Toys"))

			qry = $"CREATE TABLE tbl_products (
			id INT(11) NOT NULL AUTO_INCREMENT,
			category_id int(255),
			product_code varchar(12),
			product_name varchar(255),
			product_price decimal(10,2) DEFAULT '0.00',
			created_date timestamp DEFAULT CURRENT_TIMESTAMP,
			modified_date datetime DEFAULT NULL,
			deleted_date datetime DEFAULT NULL,
			PRIMARY KEY(id),
			FOREIGN KEY (category_id) REFERENCES tbl_category (id))"$
			SQL1.AddNonQueryToBatch(qry, Null)
	
			qry = $"INSERT INTO tbl_products (category_id, product_code, product_name, product_price) VALUES (?, ?, ?, ?)"$
			SQL1.AddNonQueryToBatch(qry, Array(2, "T001", "Teddy Bear", 99.9))
			SQL1.AddNonQueryToBatch(qry, Array(1, "H001", "Hammer", 15.75))
			SQL1.AddNonQueryToBatch(qry, Array(2, "T002", "Optimus Prime", 1000.0))
	End Select
	Dim SenderFilter As Object = SQL1.ExecNonQueryBatch("SQL")
	Wait For (SenderFilter) SQL_NonQueryComplete (Success As Boolean)
	If Success Then
		Log("Database is created successfully!")
	Else
		Log("Database creation failed!")
	End If
	DBConnector.Close(SQL1)
	Select DBConnector.DBEngine
		Case "MySQL"
			ConfigureDatabase(True)
	End Select
End Sub
#End If

#If MinimaList
' Initialize KeyValueStore
Public Sub ConfigureKeyValueStore (Enable As Boolean)
	If Not(Enable) Then Return
	' ============================================================================
	' If this is disabled, all MinimaList data will be reset when server restarts
	' ============================================================================
	KVS.Initialize(File.DirApp, "kvs.dat")
	' Load values
	If CategoryList.IsInitialized Then
		CategoryList.List = KVS.GetDefault("CategoryList", CategoryList.List)
	End If
	If ProductList.IsInitialized Then
		ProductList.List = KVS.GetDefault("ProductList", ProductList.List)
	End If
	KVS_ENABLED = True
	Log("KeyValueStore is enabled")
End Sub

' Initialize MinimaList
Public Sub ConfigureMinimaList (Enable As Boolean)
	If Not(Enable) Then Return
	' ========================================
	' This is required for this demo to work
	' ========================================
	CategoryList.Initialize
	ProductList.Initialize
End Sub

' Write MinimaList
Public Sub WriteKVS (List As String, M As MinimaList)
	KVS.Put(List, M.List)
End Sub
#End If

' Add <link>BasicAuthFilter|https://www.b4x.com/android/forum/threads/web-api-template-2.143310/#post-908109</link> class to the Modules tab
'
' Add the following lines to Process_Globals <code>
' Public AUTHENTICATION_TYPE As String
' Public AUTH As AUTH</code>
Public Sub ConfigureBasicAuth (Enable As Boolean)
	If Not(Enable) Then Return
	' =============================================
	' Not recommended for Web Based Authentication
	' =============================================
	'AUTHENTICATION_TYPE = "BASIC AUTHENTICATION"
	
	Dim Paths As List
	Paths.Initialize
	Paths.Add(ROOT_PATH & "dashboard")
	
	For Each path In Paths
		'Log(path)
		srvr.AddFilter(path, "BasicAuthFilter", False)
	Next
End Sub

' Add <link>JSONWebToken|https://www.b4x.com/android/forum/threads/web-api-template-2.143310/#post-908109</link> and <link>JWTAuthFilter|https://www.b4x.com/android/forum/threads/web-api-template-2.143310/#post-908109</link> classes to the Modules tab
'
' Add the following line to Process_Globals <code>
' Public AUTHENTICATION_TYPE As String
' Public JAT As JSONWebToken
' Public JRT As JSONWebToken
' Public Secret As Secret
' Type Secret (Access_Token As String, Refresh_Token As String)</code>
Public Sub ConfigureJWTAuth (Enable As Boolean)
	If Not(Enable) Then Return
	' =================================================================
	' Why don't use JWTs?
	' https://gist.github.com/samsch/0d1f3d3b4745d778f78b230cf6061452
	' =================================================================
	'AUTHENTICATION_TYPE = "JSON WEB TOKEN AUTHENTICATION"
	'LogColor($"Authentication: ${AUTHENTICATION_TYPE}"$, -65536)
	
	'JAT.Initialize("HMAC256", Secret.Access_Token, False)
	'JAT.Issuer = ROOT_URL
	
	'JRT.Initialize("HMAC256", Secret.Refresh_Token, False)
	'JRT.Issuer = ROOT_URL
	
	Dim Paths As List
	Paths.Initialize
	Paths.Add(ROOT_PATH & "help")
	
	For Each path In Paths
		'Log(path)
		srvr.AddFilter(path, "JWTAuthFilter", False)
	Next
End Sub